Pod::Spec.new do |s|
  s.name             = 'FirebaseRemoteConfig'
  s.version          = '8.10.0'
  s.summary          = 'Firebase Remote Config'

  s.description      = <<-DESC
Firebase Remote Config is a cloud service that lets you change the
appearance and behavior of your app without requiring users to download an
app update.
                       DESC

  s.homepage         = 'https://firebase.google.com'
  s.license          = { :type => 'Apache', :file => 'LICENSE' }
  s.authors          = 'Google, Inc.'

  s.source           = {
    :git => 'https://github.com/firebase/firebase-ios-sdk.git',
    :tag => 'CocoaPods-' + s.version.to_s
  }
  s.social_media_url = 'https://twitter.com/Firebase'
  ios_deployment_target = '10.0'
  osx_deployment_target = '10.12'
  tvos_deployment_target = '10.0'
  watchos_deployment_target = '6.0'

  s.ios.deployment_target = ios_deployment_target
  s.osx.deployment_target = osx_deployment_target
  s.tvos.deployment_target = tvos_deployment_target
  s.watchos.deployment_target = watchos_deployment_target

  s.cocoapods_version = '>= 1.4.0'
  s.prefix_header_file = false

  base_dir = "FirebaseRemoteConfig/Sources/"
  s.source_files = [
    base_dir + '**/*.[mh]',
    'Interop/Analytics/Public/*.h',
    'FirebaseABTesting/Sources/Private/*.h',
    'FirebaseCore/Sources/Private/*.h',
    'FirebaseInstallations/Source/Library/Private/*.h',
  ]
  s.public_header_files = base_dir + 'Public/FirebaseRemoteConfig/*.h'
  s.pod_target_xcconfig = {
    'GCC_C_LANGUAGE_STANDARD' => 'c99',
    'HEADER_SEARCH_PATHS' => '"${PODS_TARGET_SRCROOT}"',
    # This is needed by all pods that depend on Protobuf:
    'GCC_PREPROCESSOR_DEFINITIONS' => '$(inherited) GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS=1',
    # This is needed by all pods that depend on gRPC-RxLibrary:
    'CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES' => 'YES',
  }
  s.dependency 'FirebaseABTesting', '~> 8.0'
  s.dependency 'FirebaseCore', '~> 8.0'
  s.dependency 'FirebaseInstallations', '~> 8.0'
  s.dependency 'GoogleUtilities/Environment', '~> 7.6'
  s.dependency 'GoogleUtilities/NSData+zlib', '~> 7.6'
  
  # Base directory where the .proto files are.
    src = 'FirebaseRemoteConfig/Sources/proto'

    # We'll use protoc with the gRPC plugin.
    s.dependency '!ProtoCompiler-gRPCPlugin', '~> 1.0'

    # Pods directory corresponding to this app's Podfile, relative to the location of this podspec.
    pods_root = 'gen/FirebaseRemoteConfig/Pods'

    # Path where Cocoapods downloads protoc and the gRPC plugin.
    protoc_dir = "#{pods_root}/!ProtoCompiler"
    protoc = "#{protoc_dir}/protoc"
    plugin = "#{pods_root}/!ProtoCompiler-gRPCPlugin/grpc_objective_c_plugin"

    # Directory where you want the generated files to be placed. This is an example.
    dir = "FirebaseRemoteConfig/Sources/Generated"

    # Run protoc with the Objective-C and gRPC plugins to generate protocol messages and gRPC clients.
    # You can run this command manually if you later change your protos and need to regenerate.
    # Alternatively, you can advance the version of this podspec and run `pod update`.
    s.prepare_command = <<-CMD
      mkdir -p #{dir}
      #{protoc} \
          --plugin=protoc-gen-grpc=#{plugin} \
          --objc_out=#{dir} \
          --grpc_out=#{dir} \
          -I #{src} \
          -I #{protoc_dir} \
          #{src}/*.proto
    CMD

    # The --objc_out plugin generates a pair of .pbobjc.h/.pbobjc.m files for each .proto file.
    s.subspec 'Messages' do |ms|
      ms.source_files = "#{dir}/*.pbobjc.{h,m}"
      ms.header_mappings_dir = dir
      ms.requires_arc = false
      # The generated files depend on the protobuf runtime.
      ms.dependency 'Protobuf'
    end

    # The --objcgrpc_out plugin generates a pair of .pbrpc.h/.pbrpc.m files for each .proto file with
    # a service defined.
    s.subspec 'Services' do |ss|
      ss.source_files = "#{dir}/*.pbrpc.{h,m}"
      ss.header_mappings_dir = dir
      ss.requires_arc = true
      # The generated files depend on the gRPC runtime, and on the files generated by `--objc_out`.
      ss.dependency 'gRPC-ProtoRPC'
      ss.dependency "#{s.name}/Messages"
    end


  s.test_spec 'unit' do |unit_tests|
    unit_tests.scheme = { :code_coverage => true }
    # TODO(dmandar) - Update or delete the commented files.
    unit_tests.source_files =
        'FirebaseRemoteConfig/Tests/Unit/FIRRemoteConfigComponentTest.m',
        'FirebaseRemoteConfig/Tests/Unit/RCNConfigContentTest.m',
        'FirebaseRemoteConfig/Tests/Unit/RCNConfigDBManagerTest.m',
#        'FirebaseRemoteConfig/Tests/Unit/RCNConfigSettingsTest.m',
#        'FirebaseRemoteConfig/Tests/Unit/RCNConfigTest.m',
        'FirebaseRemoteConfig/Tests/Unit/RCNConfigExperimentTest.m',
        'FirebaseRemoteConfig/Tests/Unit/RCNConfigValueTest.m',
        'FirebaseRemoteConfig/Tests/Unit/RCNPersonalizationTest.m',
#        'FirebaseRemoteConfig/Tests/Unit/RCNRemoteConfig+FIRAppTest.m',
        'FirebaseRemoteConfig/Tests/Unit/RCNRemoteConfigTest.m',
#        'FirebaseRemoteConfig/Tests/Unit/RCNThrottlingTests.m',
        'FirebaseRemoteConfig/Tests/Unit/RCNTestUtilities.m',
        'FirebaseRemoteConfig/Tests/Unit/RCNUserDefaultsManagerTests.m',
        'FirebaseRemoteConfig/Tests/Unit/RCNTestUtilities.h',
        'FirebaseRemoteConfig/Tests/Unit/RCNInstanceIDTest.m'
    # Supply plist custom plist testing.
    unit_tests.resources =
        'FirebaseRemoteConfig/Tests/Unit/Defaults-testInfo.plist',
        'FirebaseRemoteConfig/Tests/Unit/SecondApp-GoogleService-Info.plist',
        'FirebaseRemoteConfig/Tests/Unit/TestABTPayload.txt'
    unit_tests.requires_app_host = true
    unit_tests.dependency 'OCMock'
    unit_tests.requires_arc = true
  end

  # Run Swift API tests on a real backend.
  s.test_spec 'swift-api-tests' do |swift_api|
    swift_api.scheme = { :code_coverage => true }

    # Use recent platform versions to enable async await testing
    swift_api.ios.deployment_target = "15.0"
    swift_api.osx.deployment_target = "12.0"
    swift_api.tvos.deployment_target = "15.0"
    swift_api.source_files = 'FirebaseRemoteConfig/Tests/SwiftAPI/*.swift',
                             'FirebaseRemoteConfig/Tests/FakeUtils/*.[hm]',
                             'FirebaseRemoteConfig/Tests/FakeUtils/*.swift'
    swift_api.requires_app_host = true
    swift_api.pod_target_xcconfig = {
      'SWIFT_OBJC_BRIDGING_HEADER' => '$(PODS_TARGET_SRCROOT)/FirebaseRemoteConfig/Tests/FakeUtils/Bridging-Header.h'
    }
    swift_api.dependency 'OCMock'
  end

  # Run Swift API tests and tests requiring console changes on a Fake Console.
  s.test_spec 'fake-console-tests' do |fake_console|
    fake_console.scheme = { :code_coverage => true }

    # Use recent platform versions to enable async await testing
    fake_console.ios.deployment_target = "15.0"
    fake_console.osx.deployment_target = "12.0"
    fake_console.tvos.deployment_target = "15.0"
    fake_console.source_files = 'FirebaseRemoteConfig/Tests/SwiftAPI/*.swift',
                                      'FirebaseRemoteConfig/Tests/FakeUtils/*.[hm]',
                                      'FirebaseRemoteConfig/Tests/FakeUtils/*.swift',
                                      'FirebaseRemoteConfig/Tests/FakeConsole/*.swift'
    fake_console.requires_app_host = true
    fake_console.pod_target_xcconfig = {
      'SWIFT_OBJC_BRIDGING_HEADER' => '$(PODS_TARGET_SRCROOT)/FirebaseRemoteConfig/Tests/FakeUtils/Bridging-Header.h'
    }
    fake_console.dependency 'OCMock'
  end
end
